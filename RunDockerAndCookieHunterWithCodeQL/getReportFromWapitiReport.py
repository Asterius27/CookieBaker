# python3 getReportFromWapitiReport.py -i path/to/dir/that/contains/report.json
# This script generates a summary report (report_summary.json) from a single Wapiti report.json file.
# The generated summary contains the following information:
#   - The number of crawled pages in the Wapiti scan.
#   - The number of vulnerabilities grouped by their severity levels (e.g., Critical, High, Medium, Low).
#   - The number of occurrences for each type of vulnerability (e.g., SQL Injection, XSS, etc.).
#
# Usage:
#   - Run the script by specifying the path to the directory that contains the `report.json` file generated by Wapiti.
#   - Example: python3 getReportFromWapitiReport.py -i /path/to/dir/that/contains/report.json
#
# The script will generate the following output:
#   - `report_summary.json`: A JSON file containing a summary of the Wapiti scan.

import json
import os
import argparse

DEFAULT_FILENAME_FOR_STATS = "STATS"

# create a parser
parser = argparse.ArgumentParser()
# and add arguments to the parser
parser.add_argument("-i", "--input",
                    dest="inputPath",
                    help="Path that contains report.json generated by Wapiti",
                    required=True)
args = parser.parse_args()

if args.inputPath is None:
    raise Exception("Argument Path missing!")

path = args.inputPath


def loadJsonFile(filepath) -> dict:
    data = None
    try:
        with open(filepath, 'r') as file:
            data = json.load(file)
    except Exception as ex:
        print("Error while parsing json file!")
        print(ex)
        data = None
    return data


def saveReportJson(dict, path, filename):
    with open(os.path.join(path, filename), "w") as f:
        f.write(json.dumps(dict, indent=4))
        f.flush()


def getReportDict(numCrawledPages: int = 0,
                  vulnLevelDict: dict = {},
                  vulnAggregatedNumDict: dict = {}) -> dict:
    ris = {
        'numCrawledPages': numCrawledPages,
        'vulnLevelDict': vulnLevelDict,
        'vulnAggregatedNumDict': vulnAggregatedNumDict
    }
    return ris


def extractImportantInfoFromReport(reportDict: dict):
    infosDict = reportDict.get('infos', {})
    vulnDict = reportDict.get('vulnerabilities', {})

    numCrawledPages = infosDict.get('crawled_pages_nbr', 0)  # number of crawled pages
    vulnLevelDict = {}  # dict of criticality levels associated with number of occurrences
    vulnAggregatedNumDict = {}  # dict of various vulnerability type associated with number of occurrences
    for (vulnType, vulnList) in vulnDict.items():
        numVuln = len(vulnList)
        if numVuln > 0:
            vulnAggregatedNumDict[vulnType] = numVuln

        for vuln in vulnList:
            vulnLevel = vuln.get('level', -1)
            if vulnLevel != -1:
                counter = vulnLevelDict.get(vulnLevel, 0)
                vulnLevelDict[vulnLevel] = counter + 1

    return numCrawledPages, vulnLevelDict, vulnAggregatedNumDict


wapitiReport = loadJsonFile(os.path.join(path, "report.json"))
numCrawledPages, vulnLevelDict, vulnAggregatedNumDict = extractImportantInfoFromReport(wapitiReport)
reportJSON = getReportDict(numCrawledPages, vulnLevelDict, vulnAggregatedNumDict)

saveReportJson(reportJSON, path, "report_summary.json")
print("Done!")
