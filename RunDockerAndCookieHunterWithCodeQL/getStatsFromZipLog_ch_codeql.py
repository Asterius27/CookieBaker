# run root of RunDokcerAndCookieHunter
# This script analyzes log files generated by CookieHunter, extracting statistics related to login and signup URLs,
# code coverage, and crawler behavior. It processes zipped log files within a specified directory, categorizes URLs,
# compares CookieHunter results with CodeQL findings, and generates summary statistics.
#
# The script expects a directory structure where each subdirectory represents a repository and contains zip files of logs.
#
# Usage:
#   python3 getStatsFromZipLog_ch_codeql.py -i <path/to/cookie_hunter_logs>
#   Example: python3 getStatsFromZipLog_ch_codeql.py -i cookie_hunter/logs/1_logs_flask_dockercompose/

import json
import os
import zipfile
import argparse
import re

from util.fileUtil import deleteDirAndAllContents, getListOfFilnameOfADir
from urllib.parse import urlparse

DEFAULT_FILENAME_FOR_STATS = "STATS"

# Regular expressions for extracting data from log files
# These patterns capture the number of login/signup URLs found by CookieHunter and CodeQL.
PATTERN_NUM_LOGIN_URLS_COOKIEHUNTER = r"\[COOKIEBAKER STATS\]\[DEBUG\] Login URLs \(cookie hunter\): (\d+)"
PATTERN_NUM_LOGIN_URLS_COOKIEHUNTER_REACHABLE = r"\[COOKIEBAKER STATS\]\[DEBUG\] Login URLs \(cookie hunter, reachable\): (\d+)"
PATTERN_NUM_SIGNUP_URLS_COOKIEHUNTER = r"\[COOKIEBAKER STATS\]\[DEBUG\] Signup URLs \(cookie hunter\): (\d+)"
PATTERN_NUM_SIGNUP_URLS_COOKIEHUNTER_REACHABLE = r"\[COOKIEBAKER STATS\]\[DEBUG\] Signup URLs \(cookie hunter, reachable\): (\d+)"

PATTERN_NUM_LOGIN_URLS_CODEQL = r"\[COOKIEBAKER STATS\]\[DEBUG\] Login URLs \(additional\): (\d+)"
PATTERN_NUM_LOGIN_URLS_CODEQL_REACHABLE = r"\[COOKIEBAKER STATS\]\[DEBUG\] Login URLs \(additional, reachable\): (\d+)"
PATTERN_NUM_SIGNUP_URLS_CODEQL = r"\[COOKIEBAKER STATS\]\[DEBUG\] Signup URLs \(additional\): (\d+)"
PATTERN_NUM_SIGNUP_URLS_CODEQL_REACHABLE = r"\[COOKIEBAKER STATS\]\[DEBUG\] Signup URLs \(additional, reachable\): (\d+)"

# These patterns capture lists of login/signup URLs found by CookieHunter and CodeQL.
PATTERN_LOGIN_URLS_COOKIEHUNTER = r"\[COOKIEBAKER\]\[DEBUG\] Login URLs: (\[.*\])"
PATTERN_LOGIN_URLS_COOKIEHUNTER_REACHABLE = r"\[COOKIEBAKER\]\[DEBUG\] Login Cookie Hunter: (\[.*\])"
PATTERN_SIGNUP_URLS_COOKIEHUNTER = r"\[COOKIEBAKER\]\[DEBUG\] Signup URLs: (\[.*\])"
PATTERN_SIGNUP_URLS_COOKIEHUNTER_REACHABLE = r"\[COOKIEBAKER\]\[DEBUG\] Signup Cookie Hunter: (\[.*\])"

PATTERN_LOGIN_URLS_CODEQL = r"\[COOKIEBAKER\]\[DEBUG\] Login Endpoints CodeQL: (\[.*\])"
PATTERN_LOGIN_URLS_CODEQL_REACHABLE = r"\[COOKIEBAKER\]\[DEBUG\] Login Endpoints CodeQL: (\[.*\])"
PATTERN_SIGNUP_URLS_CODEQL = r"\[COOKIEBAKER\]\[DEBUG\] Signup Endpoints CodeQL: (\[.*\])"
PATTERN_SIGNUP_URLS_CODEQL_REACHABLE = r"\[COOKIEBAKER\]\[DEBUG\] Signup Endpoints CodeQL: (\[.*\])"

# for extracting result of set(visited) == set(visited_and_reachable)
PATTERN_VISITED_VS_VISITEDANDREACHABLE = r"\[COOKIEBAKER\]\[DEBUG\] Are all visited urls reachable\?([a-zA-Z]*)"
PATTERN_URLS_SET = r"\[COOKIEBAKER\]\[DEBUG\] set\((\[.*\])\)"
PATTERN_URLS_REACHABLE_SET = r"\[COOKIEBAKER\]\[DEBUG\] Reachable set\((\[.*\])\)"

# This pattern captures all the urls that the crawler visited and their reachability status
PATTERN_CRAWLER_LINE = r"\[COOKIEBAKER\]\[DEBUG\] CRAWLER:(.*) Reachable: ([a-zA-Z]*)"

# These patterns are used to check if the login/signup actions are attempted or successful
PATTERN_LOGIN_ATTEMPTED = r"Starting login @"
PATTERN_LOGIN_SUCCESSFUL = r"Collected login cookies"

# These patterns are used to capture the login/signup actions
PATTERN_LOGINMANAGER_LOGGED_IN = r"\[COOKIEBAKER\]\[DEBUG\] \[LOGINMANAGER\]\[LOGGED_IN\] domain=\{(.*)\} lurl=\{(.*)\} success=\{(.*)\}"
PATTERN_FUZZER_SIGNED_UP = r"\[COOKIEBAKER\]\[DEBUG\] \[FUZZER\]\[SIGNED_UP\] domain=\{(.*)\} rurl=\{(.*)\} success=\{(.*)\}"
PATTERN_LOGINMANAGERCREDENTIALS_LOGGED_IN = r"\[COOKIEBAKER\]\[DEBUG\] \[LOGINMANAGERCREDENTIALS\]\[LOGGED_IN\] domain=\{(.*)\} lurl=\{(.*)\} success=\{(.*)\}"

PATTERN_STARTING_LOGIN_URLS = r"\[LoginManager\] Starting login @ ([ -~]*)"
PATTERN_LOGIN_ATTEMPT_CH = r"\[LoginManager\] \[ORACLE\] Starting login @"
PATTERN_SIGNUP_ATTEMPTED = r"Starting signup fuzzing @"

# these patterns extracts the list of urls with forms from the codeql log
PATTERN_LOGIN_URLS_CODEQL_WITH_FORMS = r"\[COOKIEBAKER\]\[DEBUG\] Login Endpoints CodeQL with forms: (\[.*\])"
PATTERN_SIGNUP_URLS_CODEQL_WITH_FORMS = r"\[COOKIEBAKER\]\[DEBUG\] Signup Endpoints CodeQL with forms: (\[.*\])"


def getListOfStringFromJsonString(inputStr):
    """Helper method to convert a string representation of a JSON list into a Python list"""
    inputStr = inputStr.replace('\'', '"')  # use only " for strings in json
    inputStr = inputStr.replace('u"', '"')  # remove "u" behind strings
    # print(inputStr)
    ris = json.loads(inputStr)
    return ris


def removePortFromUrl(url):
    """Helper method to remove the port number from a URL"""
    # parse the URL and remove the port part
    parsedUrl = urlparse(url)
    # rebuild the URL without the port, using the parsed URL's attributes
    cleaned_url = parsedUrl._replace(netloc=parsedUrl.hostname)
    return cleaned_url.geturl()


def removePortsFromUrls(urls):
    """Helper method to remove port numbers from a list of URLs"""
    cleanedUrls = []
    for url in urls:
        cleanedUrls.append(removePortFromUrl(url))

    return cleanedUrls


def checkLogin(filenames):
    """Helper method to determine if a set of log files contains login-related actions"""
    # to be ok, there must be ALL:
    # - login_url
    # - loging_fill
    # - post_submit_login

    isThereLoginForm = False
    isThereLoginFormFilled = False
    isThereLoginSubmitted = False

    for filename in filenames:
        if not isThereLoginForm and "login_url" in filename.lower():
            isThereLoginForm = True
        elif not isThereLoginFormFilled and "login_fill" in filename.lower():
            isThereLoginFormFilled = True
        elif not isThereLoginSubmitted and "post_submit_login" in filename.lower():
            isThereLoginSubmitted = True

        if isThereLoginForm and isThereLoginFormFilled and isThereLoginSubmitted:
            break

    return isThereLoginForm, isThereLoginFormFilled, isThereLoginSubmitted


def checkSignup(filenames):
    """Helper method to determine if a set of log files contains signup-related actions"""
    # to be ok, there must be ALL:
    # - signup_url
    # - signup_fill
    # - post_submit_signup

    isThereSignupForm = False
    isThereSignupFormFilled = False
    isThereSignupSubmitted = False

    for filename in filenames:
        if not isThereSignupForm and "signup_url" in filename.lower():
            isThereSignupForm = True
        elif not isThereSignupFormFilled and "signup_fill" in filename.lower():
            isThereSignupFormFilled = True
        elif not isThereSignupSubmitted and "post_submit_signup" in filename.lower():
            isThereSignupSubmitted = True

        if isThereSignupForm and isThereSignupFormFilled and isThereSignupSubmitted:
            break

    return isThereSignupForm, isThereSignupFormFilled, isThereSignupSubmitted


def extractNumFromText(pattern, text):
    """Helper method to extract an integer from a text using a regular expression."""
    match = re.search(pattern, text)
    if match and len(match.groups()) >= 1:
        num = match.group(1)
        try:
            num = int(num)
            return True, num
        except Exception as ex:
            print(f"Error while converting to int: {num}")
            print(ex)
            return False, 0
    else:
        return False, 0


def extractBoolFromText(pattern, text):
    """Helper method to extract a boolean from a text using a regular expression"""
    match = re.search(pattern, text)
    if match and len(match.groups()) >= 1:
        val = match.group(1)
        try:
            val = bool(val)
            return True, val
        except Exception as ex:
            print(f"Error while converting to bool: {val}")
            print(ex)
            return False, False
    else:
        return False, False


def extractListFromText(pattern, text, groupIndex=0):
    """Helper method to extract a list from a text using a regular expression"""
    matches = re.findall(pattern, text)
    if len(matches) > 0 and len(matches) > groupIndex:
        lstStr = matches[groupIndex]
        return True, getListOfStringFromJsonString(lstStr)
    else:
        return False, []


def extractAllGroupsFromText(pattern, text):
    """Helper method to extract all groups from a text using a regular expression"""
    matches = re.findall(pattern, text)
    if len(matches) > 0:
        return True, matches
    else:
        return False, []


def isTherePatternInText(pattern, text):
    """Helper method to check if a pattern exists in a given text"""
    _, matches = extractAllGroupsFromText(pattern, text)
    return len(matches) > 0


def extractFirstMatchAsTuple(pattern, text):
    """Helper method to extract the first matching group as tuple"""
    match = re.search(pattern, text)
    if match and len(match.groups()) > 0:
        matchedDomain = match.group(1)
        matchedUrl = match.group(2)
        matchedSuccess = match.group(3)
        return True, (matchedDomain, matchedUrl, matchedSuccess)
    else:
        return False, ("", "", False)


def areAllElementsOfList1InList2(list1, list2):
    """Helper method to check if all elements of a list are in another list"""
    return all(element in list2 for element in list1)


def areAnyElementsOfList1InList2(list1, list2):
    """Helper method to check if any element of a list are in another list"""
    return any(element in list2 for element in list1)


def containsPort(path: str, port: str):
    """Helper method to check if a given path contains a given port"""
    return port == path.split('.')[-2].split(':')[-1]


def removeTrailingSlash(url):
    """Helper method to remove trailing slashes from a URL"""
    return url.rstrip('/')


def isValidCrawledUrls(urls):
    """Helper method to check if a list of urls is valid by checking that they have a depth greater than 3"""
    isValid = False
    for url in urls:
        url = removeTrailingSlash(url)
        isValid = isValid or len(url.split('/')) > 3
    return isValid

# Initialize counters for various statistics
counterRepo = 0
counterRepoHasScreen = 0
counterRepoHasDoneSignup = 0
counterRepoHasDoneLogin = 0
counterRepoHasDoneSignupAndLogin = 0

# counter for Login Cookie Hunter and CodeQL urls comparison
counterRepoWithNoUrl_login = 0
counterRepoWithSameSetOfUrlsReachable_login = 0
counterRepoWithUrlsReachableDisjoint_login = 0
counterRepoWithUrlsReachableDisjointCookieHunterEmpty_login = 0
counterRepoWithUrlsReachableDisjointCodeQlEmpty_login = 0
counterRepoWithUrlsCodeQLSubsetCookieHunter_login = 0
counterRepoWithUrlsCookieHunterSubsetCodeQL_login = 0
counterRepoWithIntersectionUrls_login = 0

lstNameRepoWithNoUrl_login = []
lstNameRepoWithSameSetOfUrlsReachable_login = []
lstNameRepoWithUrlsReachableDisjoint_login = []
lstNameRepoWithUrlsReachableDisjointCookieHunterEmpty_login = []
lstNameRepoWithUrlsReachableDisjointCodeQlEmpty_login = []
lstNameRepoWithUrlsCodeQLSubsetCookieHunter_login = []
lstNameRepoWithUrlsCookieHunterSubsetCodeQL_login = []
lstNameRepoWithIntersectionUrls_login = []

# counter for Signup Cookie Hunter and CodeQL urls comparison
counterRepoWithNoUrl_signup = 0
counterRepoWithSameSetOfUrlsReachable_signup = 0
counterRepoWithUrlsReachableDisjoint_signup = 0
counterRepoWithUrlsReachableDisjointCookieHunterEmpty_signup = 0
counterRepoWithUrlsReachableDisjointCodeQlEmpty_signup = 0
counterRepoWithUrlsCodeQLSubsetCookieHunter_signup = 0
counterRepoWithUrlsCookieHunterSubsetCodeQL_signup = 0
counterRepoWithIntersectionUrls_signup = 0

lstNameRepoWithNoUrl_signup = []
lstNameRepoWithSameSetOfUrlsReachable_signup = []
lstNameRepoWithUrlsReachableDisjoint_signup = []
lstNameRepoWithUrlsReachableDisjointCookieHunterEmpty_signup = []
lstNameRepoWithUrlsReachableDisjointCodeQlEmpty_signup = []
lstNameRepoWithUrlsCodeQLSubsetCookieHunter_signup = []
lstNameRepoWithUrlsCookieHunterSubsetCodeQL_signup = []
lstNameRepoWithIntersectionUrls_signup = []

# counter for Signup Cookie Hunter and CodeQL urls comparison
counterRepoWithNoUrl_signuplogin = 0
counterRepoWithSameSetOfUrlsReachable_signuplogin = 0
counterRepoWithUrlsReachableDisjoint_signuplogin = 0
counterRepoWithUrlsReachableDisjointCookieHunterEmpty_signuplogin = 0
counterRepoWithUrlsReachableDisjointCodeQlEmpty_signuplogin = 0
counterRepoWithUrlsCodeQLSubsetCookieHunter_signuplogin = 0
counterRepoWithUrlsCookieHunterSubsetCodeQL_signuplogin = 0
counterRepoWithIntersectionUrls_signuplogin = 0

lstNameRepoWithNoUrl_signuplogin = []
lstNameRepoWithSameSetOfUrlsReachable_signuplogin = []
lstNameRepoWithUrlsReachableDisjoint_signuplogin = []
lstNameRepoWithUrlsReachableDisjointCookieHunterEmpty_signuplogin = []
lstNameRepoWithUrlsReachableDisjointCodeQlEmpty_signuplogin = []
lstNameRepoWithUrlsCodeQLSubsetCookieHunter_signuplogin = []
lstNameRepoWithUrlsCookieHunterSubsetCodeQL_signuplogin = []
lstNameRepoWithIntersectionUrls_signuplogin = []

lstNameRepoWithCookieHunterUrlsReachable_signup = []
lstNameRepoWithCookieHunterUrlsReachable_login = []
lstNameRepoWithCodeQlUrlsReachable_signup = []
lstNameRepoWithCodeQlUrlsReachable_login = []

# lst for other stats about login and signup
lstNameRepoWitLoginUrlsReachable = []
lstNameRepoWithSignupUrlsReachable = []
lstNameRepoWithLoginAndSignupUrlsReachable = []
lstNameRepoWithLoginAttempted = []
lstNameRepoWithLoginSuccessful = []
lstNameRepoWithBothLoginAndSignupReachableOnSamePort = []
lstNameRepoWithRegistrationAttempted = []

# create a parser
parser = argparse.ArgumentParser()
# and add arguments to the parser
parser.add_argument("-i", "--input",
                    dest="inputPath",
                    help="Path that contains all dirs with cookie hunter results",
                    required=True)
args = parser.parse_args()

if args.inputPath is None:
    raise Exception("Argument Path missing!")

base_dir = args.inputPath

repoResults = []
urlsRepo = []

removedRepo = set()
repos = set()

# Walk through the directory
for root, dirs, files in os.walk(base_dir):
    if root == base_dir:  # skip the root
        continue
    if not os.path.isdir(root):  # skip if not a dir (we have a dir for every repo)
        continue

    print(f"---\nREPO: {root}")
    repoName = root.rsplit('/', 1)[-1]
    zipsResults = []

    statsPath = os.path.join(root, f"{DEFAULT_FILENAME_FOR_STATS}_urls.txt")
    outputFileStats = open(statsPath, "w")

    counts = []

    for file in files:
        hasScreensZip = False
        isSignupZip = False
        isLoginZip = False
        logSaysAllGoodZip = False

        if file.endswith('.zip'):
            print(f"ZIP File: {file}")
            zip_path = os.path.join(root, file)
            if not containsPort(file, "27017") and not containsPort(file, "5672"):  # exclude mongo and rabbitmq
                # Open the zip file
                with zipfile.ZipFile(zip_path, 'r') as myzip:
                    if 'screenshots/' in myzip.namelist():
                        # use CH screenshots to check if signup and login have been done (not reliable as using log)

                        path = os.path.join(root, 'temp')
                        myzip.extractall(path)

                        filenames = getListOfFilnameOfADir(path + '/screenshots/')

                        isThereSignupForm, isThereSignupFormFilled, isThereSignupSubmitted = checkSignup(filenames)
                        isThereLoginForm, isThereLoginFormFilled, isThereLoginSubmitted = checkLogin(filenames)

                        deleteDirAndAllContents(os.path.join(root, 'temp'))

                        hasScreensZip = len(filenames) > 0  # any screen is ok
                        isSignupZip = isThereSignupForm and isThereSignupFormFilled and isThereSignupSubmitted
                        isLoginZip = isThereLoginForm and isThereLoginFormFilled and isThereLoginSubmitted

                    if 'out.log' in myzip.namelist():
                        with myzip.open('out.log', 'r') as mylog:
                            logStr = mylog.read().decode('ascii', 'ignore')
                            if 'All good' in logStr:  # ignore the screens, and take priority from logs
                                isSignupZip = True
                                isLoginZip = True

                            # extract values from log using regex
                            (_, numLoginURLsCookieHunter) = extractNumFromText(PATTERN_NUM_LOGIN_URLS_COOKIEHUNTER,
                                                                               logStr)
                            (_, numLoginURLsCookieHunterReachable) = extractNumFromText(
                                PATTERN_NUM_LOGIN_URLS_COOKIEHUNTER_REACHABLE, logStr)
                            (_, numLoginURLsCodeQl) = extractNumFromText(PATTERN_NUM_LOGIN_URLS_CODEQL, logStr)
                            (_, numLoginURLsCodeQlReachable) = extractNumFromText(
                                PATTERN_NUM_LOGIN_URLS_CODEQL_REACHABLE,
                                logStr)

                            (_, numSignupURLsCookieHunter) = extractNumFromText(PATTERN_NUM_SIGNUP_URLS_COOKIEHUNTER,
                                                                                logStr)
                            (_, numSignupURLsCookieHunterReachable) = extractNumFromText(
                                PATTERN_NUM_SIGNUP_URLS_COOKIEHUNTER_REACHABLE, logStr)
                            (_, numSignupURLsCodeQl) = extractNumFromText(PATTERN_NUM_SIGNUP_URLS_CODEQL, logStr)
                            (_, numSignupURLsCodeQlReachable) = extractNumFromText(
                                PATTERN_NUM_SIGNUP_URLS_CODEQL_REACHABLE,
                                logStr)

                            _, lstLoginURLsCookieHunter = extractListFromText(PATTERN_LOGIN_URLS_COOKIEHUNTER, logStr)
                            _, lstLoginURLsCookieHunterReachable = extractListFromText(
                                PATTERN_LOGIN_URLS_COOKIEHUNTER_REACHABLE, logStr)
                            _, lstSignupURLsCookieHunter = extractListFromText(PATTERN_SIGNUP_URLS_COOKIEHUNTER, logStr)
                            _, lstSignupURLsCookieHunterReachable = extractListFromText(
                                PATTERN_SIGNUP_URLS_COOKIEHUNTER_REACHABLE, logStr)
                            _, lstLoginURLsCodeQl = extractListFromText(PATTERN_LOGIN_URLS_CODEQL, logStr)
                            _, lstLoginURLsCodeQlReachable = extractListFromText(PATTERN_LOGIN_URLS_CODEQL_WITH_FORMS,
                                                                                 logStr)

                            _, lstSignupURLsCodeQl = extractListFromText(PATTERN_SIGNUP_URLS_CODEQL, logStr)
                            _, lstSignupURLsCodeQlReachable = extractListFromText(PATTERN_SIGNUP_URLS_CODEQL_WITH_FORMS,
                                                                                  logStr)

                            (_, boolEqualVisitedAndVisitedReachable) = extractBoolFromText(
                                PATTERN_VISITED_VS_VISITEDANDREACHABLE, logStr)

                            _, lstUrlAndReachability = extractAllGroupsFromText(PATTERN_CRAWLER_LINE, logStr)

                            # ignore ports in urls
                            lstLoginURLsCookieHunter = removePortsFromUrls(lstLoginURLsCookieHunter)
                            lstLoginURLsCookieHunterReachable = removePortsFromUrls(lstLoginURLsCookieHunterReachable)
                            lstSignupURLsCookieHunter = removePortsFromUrls(lstSignupURLsCookieHunter)
                            lstSignupURLsCookieHunterReachable = removePortsFromUrls(lstSignupURLsCookieHunterReachable)
                            lstLoginURLsCodeQl = removePortsFromUrls(lstLoginURLsCodeQl)
                            lstLoginURLsCodeQlReachable = removePortsFromUrls(lstLoginURLsCodeQlReachable)
                            lstSignupURLsCodeQl = removePortsFromUrls(lstSignupURLsCodeQl)
                            lstSignupURLsCodeQlReachable = removePortsFromUrls(lstSignupURLsCodeQlReachable)

                            lstCrawlerReachableUrls = []
                            lstCrawlerNotReachableUrls = []

                            # filter crawled url by reachability
                            for (url, strIsReachable) in lstUrlAndReachability:
                                url = removePortFromUrl(url)
                                if strIsReachable == "True":
                                    lstCrawlerReachableUrls.append(url)
                                elif strIsReachable == "False":
                                    lstCrawlerNotReachableUrls.append(url)

                            areThereBothLoginAndSignupReachableOnSamePort = \
                                len(lstLoginURLsCookieHunterReachable + lstLoginURLsCodeQlReachable) > 0 \
                                and len(lstSignupURLsCookieHunterReachable + lstSignupURLsCodeQlReachable) > 0

                            print("\n-------------")
                            print(lstLoginURLsCookieHunterReachable)
                            print(lstLoginURLsCodeQlReachable)
                            print(lstSignupURLsCookieHunterReachable)
                            print(lstSignupURLsCodeQlReachable)
                            print("\n-------------")

                            _, (fuzzerDomain, fuzzerUrl, fuzzerSuccess) = extractFirstMatchAsTuple(
                                PATTERN_FUZZER_SIGNED_UP,
                                logStr)
                            fuzzerUrl = removePortFromUrl(fuzzerUrl)
                            _, (lmDomain, lmUrl, lmSuccess) = extractFirstMatchAsTuple(PATTERN_LOGINMANAGER_LOGGED_IN,
                                                                                       logStr)
                            lmUrl = removePortFromUrl(lmUrl)
                            _, (lmCredentialsDomain, lmCredentialsUrl, lmCredentialsSuccess) = extractFirstMatchAsTuple(
                                PATTERN_LOGINMANAGERCREDENTIALS_LOGGED_IN, logStr)
                            lmCredentialsUrl = removePortFromUrl(lmCredentialsUrl)

                            isLoginCHAttempted = isTherePatternInText(PATTERN_LOGIN_ATTEMPT_CH, logStr)

                            isSignupUrlInCookieHunter = fuzzerUrl in lstSignupURLsCookieHunterReachable
                            isSignupUrlInCodeQl = fuzzerUrl in lstSignupURLsCodeQlReachable
                            isLoginUrlInCookieHunter = lmUrl in lstLoginURLsCookieHunterReachable
                            isLoginUrlInCodeQl = lmUrl in lstLoginURLsCodeQlReachable
                            isLoginCredentialsUrlInCookieHunter = lmCredentialsUrl in lstLoginURLsCookieHunterReachable
                            isLoginCredentialsUrlInCodeQl = lmCredentialsUrl in lstLoginURLsCodeQlReachable

                            _, loginAttemptsUrls = extractAllGroupsFromText(PATTERN_STARTING_LOGIN_URLS, logStr)
                            loginAttemptsUrls = removePortsFromUrls(loginAttemptsUrls)

                            isLoginAttempted = isLoginCHAttempted or len(loginAttemptsUrls) > 0

                            isSignupAttempted = isTherePatternInText(PATTERN_SIGNUP_ATTEMPTED, logStr)

                            isLoginSuccessful = isTherePatternInText(PATTERN_LOGIN_SUCCESSFUL, logStr) \
                                                and not isLoginCredentialsUrlInCodeQl and not isLoginCredentialsUrlInCookieHunter
                            isSignedUp = isSignupUrlInCodeQl or isSignupUrlInCookieHunter

                            repos.add(repoName)
                            counts.append((file, numLoginURLsCookieHunter, numLoginURLsCookieHunterReachable,
                                           numSignupURLsCookieHunter, numSignupURLsCookieHunterReachable,
                                           numLoginURLsCodeQl, numLoginURLsCodeQlReachable,
                                           numSignupURLsCodeQl, numSignupURLsCodeQlReachable,

                                           lstLoginURLsCookieHunter, lstLoginURLsCookieHunterReachable,
                                           lstSignupURLsCookieHunter, lstSignupURLsCookieHunterReachable,
                                           lstLoginURLsCodeQl, lstLoginURLsCodeQlReachable,
                                           lstSignupURLsCodeQl, lstSignupURLsCodeQlReachable,

                                           boolEqualVisitedAndVisitedReachable, lstCrawlerReachableUrls,
                                           lstCrawlerNotReachableUrls,

                                           isLoginAttempted, isLoginSuccessful,
                                           areThereBothLoginAndSignupReachableOnSamePort,

                                           isSignupUrlInCookieHunter,
                                           isSignupUrlInCodeQl,
                                           isLoginUrlInCookieHunter,

                                           isLoginUrlInCodeQl,
                                           isLoginCredentialsUrlInCookieHunter,
                                           isLoginCredentialsUrlInCodeQl,
                                           isSignupAttempted
                                           ))

                    zipsResults.append([hasScreensZip, isSignupZip, isLoginZip])
        else:
            removedRepo.add(repoName)

    repoHasScreens = False
    repoHasDoneSignup = False
    repoHasDoneLogin = False

    lstBoolEqualVisitedAndVisitedReachable = []

    if len(zipsResults) > 0:
        # sort by number of True values in each zip analysis result []
        sortedResults = sorted(zipsResults, key=lambda x: (x[0], x[1], x[2]), reverse=True)
        repoHasScreens, repoHasDoneSignup, repoHasDoneLogin = sortedResults[0]

    if repoHasScreens:
        counterRepoHasScreen += 1
    if repoHasDoneSignup:
        counterRepoHasDoneSignup += 1
    if repoHasDoneLogin:
        counterRepoHasDoneLogin += 1
    if repoHasDoneSignup and repoHasDoneLogin:
        counterRepoHasDoneSignupAndLogin += 1

    # write counts
    outputFileStats.write(f"Filename\t"
                          f"Login URLs Cookie Hunter\tLogin URLs Cookie Hunter Reachable\t"
                          f"Signup URLs Cookie Hunter\tSignup URLs Cookie Hunter Reachable\t"
                          f"Login URLs CodeQl\tLogin URLs CodeQl Reachable\t"
                          f"Signup URLs CodeQl\tSignup URLs CodeQl Reachable\t"
                          f"Lst Login URLs CookieHunter\t Lst Login URLs CookieHunter Reachable\t"
                          f"Lst Signup URLs CookieHunter\tLst Signup URLs CookieHunter Reachable\t"
                          f"Lst Login URLs CodeQL\tLst Login URLs CodeQL Reachable\t"
                          f"Lst Signup URLs CodeQL\tLst Signup URLs CodeQL Reachable\t"
                          f"URLs Visited equal to Visited and Reachable\t"
                          f"Lst URLs visited by crawler\tLst URLs visited and reachable\t"
                          f"Is Login Attempted?\tIs Login Successful?\tBoth login and Signup reachable on same port?\t"
                          f"isSignupUrlInCookieHunter\tisSignupUrlInCodeQl\tisLoginUrlInCookieHunter\t"
                          f"isLoginUrlInCodeQl\tisLoginCredentialsUrlInCookieHunter\tisLoginCredentialsUrlInCodeQl\t"
                          f"isSignupAttempted\n"
                          )

    urlsReachableLoginCookieHunter = []
    urlsReachableSignupCookieHunter = []
    urlsReachableLoginCodeQl = []
    urlsReachableSignupCodeQl = []

    boolRepoUrlVisitedVsVisitedReachable = []
    urlsCrawlerReachable = []
    urlsCrawlerNotReachable = []

    repoIsLoginAttempted = False
    repoIsLoginSuccessful = False
    repoAreThereBothLoginAndSignupOnSamePort = False
    repoIsSignupAttempted = False

    for (file, numLoginURLsCookieHunter, numLoginURLsCookieHunterReachable,
         numSignupURLsCookieHunter, numSignupURLsCookieHunterReachable,
         numLoginURLsCodeQl, numLoginURLsCodeQlReachable,
         numSignupURLsCodeQl, numSignupURLsCodeQlReachable,
         lstLoginURLsCookieHunter, lstLoginURLsCookieHunterReachable,
         lstSignupURLsCookieHunter, lstSignupURLsCookieHunterReachable,
         lstLoginURLsCodeQl, lstLoginURLsCodeQlReachable,
         lstSignupURLsCodeQl, lstSignupURLsCodeQlReachable,
         boolEqualVisitedAndVisitedReachable, lstCrawlerReachableUrls, lstCrawlerNotReachableUrls,
         isLoginAttempted, isLoginSuccessful, areThereBothLoginAndSignupReachableOnSamePort,

         isSignupUrlInCookieHunter,
         isSignupUrlInCodeQl,
         isLoginUrlInCookieHunter,
         isLoginUrlInCodeQl,
         isLoginCredentialsUrlInCookieHunter,
         isLoginCredentialsUrlInCodeQl,
         isSignupAttempted
         ) in counts:  # iterating through info extracted from each log of the current repo
        outputFileStats.write(f"{file}\t"
                              f"{numLoginURLsCookieHunter}\t{numLoginURLsCookieHunterReachable}\t"
                              f"{numSignupURLsCookieHunter}\t{numSignupURLsCookieHunterReachable}\t"
                              f"{numLoginURLsCodeQl}\t{numLoginURLsCodeQlReachable}\t"
                              f"{numSignupURLsCodeQl}\t{numSignupURLsCodeQlReachable}\t"
                              f"{lstLoginURLsCookieHunter}\t{lstLoginURLsCookieHunterReachable}\t"
                              f"{lstSignupURLsCookieHunter}\t{lstSignupURLsCookieHunterReachable}\t"
                              f"{lstLoginURLsCodeQl}\t{lstLoginURLsCodeQlReachable}\t"
                              f"{lstSignupURLsCodeQl}\t{lstSignupURLsCodeQlReachable}\t"
                              f"{boolEqualVisitedAndVisitedReachable}\t"
                              f"{lstCrawlerReachableUrls}\t{lstCrawlerNotReachableUrls}\t"
                              f"{isLoginAttempted}\t{isLoginSuccessful}\t{areThereBothLoginAndSignupReachableOnSamePort}\t"
                              f"{isSignupAttempted}\n"
                              )

        urlsReachableLoginCookieHunter = urlsReachableLoginCookieHunter + lstLoginURLsCookieHunterReachable
        urlsReachableSignupCookieHunter = urlsReachableSignupCookieHunter + lstSignupURLsCookieHunterReachable
        urlsReachableLoginCodeQl = urlsReachableLoginCodeQl + lstLoginURLsCodeQlReachable
        urlsReachableSignupCodeQl = urlsReachableSignupCodeQl + lstSignupURLsCodeQlReachable

        boolRepoUrlVisitedVsVisitedReachable.append(boolEqualVisitedAndVisitedReachable)
        urlsCrawlerReachable = urlsCrawlerReachable + lstCrawlerReachableUrls
        urlsCrawlerNotReachable = urlsCrawlerNotReachable + lstCrawlerNotReachableUrls

        repoIsLoginAttempted = repoIsLoginAttempted or isLoginAttempted
        repoIsLoginSuccessful = repoIsLoginSuccessful or isLoginSuccessful
        repoAreThereBothLoginAndSignupOnSamePort = repoAreThereBothLoginAndSignupOnSamePort or areThereBothLoginAndSignupReachableOnSamePort
        repoIsSignupAttempted = repoIsSignupAttempted or isSignupAttempted

    outputFileStats.flush()
    outputFileStats.close()

    # convert to sets
    setUrlsReachableLoginCookieHunter = set(urlsReachableLoginCookieHunter)
    setUrlsReachableSignupCookieHunter = set(urlsReachableSignupCookieHunter)
    setUrlsReachableLoginCodeQl = set(urlsReachableLoginCodeQl)
    setUrlsReachableSignupCodeQl = set(urlsReachableSignupCodeQl)

    # login classification
    if len(setUrlsReachableLoginCookieHunter) == 0 and len(setUrlsReachableLoginCodeQl) == 0:  # both empty
        counterRepoWithNoUrl_login += 1
        lstNameRepoWithNoUrl_login.append(repoName)
    elif setUrlsReachableLoginCookieHunter == setUrlsReachableLoginCodeQl:
        counterRepoWithSameSetOfUrlsReachable_login += 1
        lstNameRepoWithSameSetOfUrlsReachable_login.append(repoName)
    elif setUrlsReachableLoginCookieHunter.isdisjoint(setUrlsReachableLoginCodeQl):
        if len(setUrlsReachableLoginCookieHunter) == 0:
            counterRepoWithUrlsReachableDisjointCookieHunterEmpty_login += 1
            lstNameRepoWithUrlsReachableDisjointCookieHunterEmpty_login.append(repoName)
        elif len(setUrlsReachableLoginCodeQl) == 0:
            counterRepoWithUrlsReachableDisjointCodeQlEmpty_login += 1
            lstNameRepoWithUrlsReachableDisjointCodeQlEmpty_login.append(repoName)
        else:
            counterRepoWithUrlsReachableDisjoint_login += 1
            lstNameRepoWithUrlsReachableDisjoint_login.append(repoName)
    elif setUrlsReachableLoginCodeQl.issubset(setUrlsReachableLoginCookieHunter):
        counterRepoWithUrlsCodeQLSubsetCookieHunter_login += 1
        lstNameRepoWithUrlsCodeQLSubsetCookieHunter_login.append(repoName)
    elif setUrlsReachableLoginCookieHunter.issubset(setUrlsReachableLoginCodeQl):
        counterRepoWithUrlsCookieHunterSubsetCodeQL_login += 1
        lstNameRepoWithUrlsCookieHunterSubsetCodeQL_login.append(repoName)
    elif len(setUrlsReachableLoginCookieHunter.intersection(setUrlsReachableLoginCodeQl)):
        counterRepoWithIntersectionUrls_login += 1
        lstNameRepoWithIntersectionUrls_login.append(repoName)

    # signup classification
    if len(setUrlsReachableSignupCookieHunter) == 0 and len(setUrlsReachableSignupCodeQl) == 0:  # both empty
        counterRepoWithNoUrl_signup += 1
        lstNameRepoWithNoUrl_signup.append(repoName)
    elif setUrlsReachableSignupCookieHunter == setUrlsReachableSignupCodeQl:
        counterRepoWithSameSetOfUrlsReachable_signup += 1
        lstNameRepoWithSameSetOfUrlsReachable_signup.append(repoName)
    elif setUrlsReachableSignupCookieHunter.isdisjoint(setUrlsReachableSignupCodeQl):
        if len(setUrlsReachableSignupCookieHunter) == 0:
            counterRepoWithUrlsReachableDisjointCookieHunterEmpty_signup += 1
            lstNameRepoWithUrlsReachableDisjointCookieHunterEmpty_signup.append(repoName)
        elif len(setUrlsReachableSignupCodeQl) == 0:
            counterRepoWithUrlsReachableDisjointCodeQlEmpty_signup += 1
            lstNameRepoWithUrlsReachableDisjointCodeQlEmpty_signup.append(repoName)
        else:
            counterRepoWithUrlsReachableDisjoint_signup += 1
            lstNameRepoWithUrlsReachableDisjoint_signup.append(repoName)
    elif setUrlsReachableSignupCodeQl.issubset(setUrlsReachableSignupCookieHunter):
        counterRepoWithUrlsCodeQLSubsetCookieHunter_signup += 1
        lstNameRepoWithUrlsReachableDisjoint_signup.append(repoName)
    elif setUrlsReachableSignupCookieHunter.issubset(setUrlsReachableSignupCodeQl):
        counterRepoWithUrlsCookieHunterSubsetCodeQL_signup += 1
        lstNameRepoWithUrlsCookieHunterSubsetCodeQL_signup.append(repoName)
    elif len(setUrlsReachableSignupCookieHunter.intersection(setUrlsReachableSignupCodeQl)):
        counterRepoWithIntersectionUrls_signup += 1
        lstNameRepoWithIntersectionUrls_signup.append(repoName)

    # set unions
    setUrlsReachableCookieHunter = setUrlsReachableSignupCookieHunter.union(setUrlsReachableLoginCookieHunter)
    setUrlsReachableCodeQl = setUrlsReachableSignupCodeQl.union(setUrlsReachableLoginCodeQl)

    # signup e login classification
    if len(setUrlsReachableCookieHunter) == 0 and len(setUrlsReachableCodeQl) == 0:  # both empty
        counterRepoWithNoUrl_signuplogin += 1
        lstNameRepoWithNoUrl_signuplogin.append(repoName)
    elif setUrlsReachableCookieHunter == setUrlsReachableCodeQl:
        counterRepoWithSameSetOfUrlsReachable_signuplogin += 1
        lstNameRepoWithSameSetOfUrlsReachable_signuplogin.append(repoName)
    elif setUrlsReachableCookieHunter.isdisjoint(setUrlsReachableCodeQl):
        if len(setUrlsReachableCookieHunter) == 0:
            counterRepoWithUrlsReachableDisjointCookieHunterEmpty_signuplogin += 1
            lstNameRepoWithUrlsReachableDisjointCookieHunterEmpty_signuplogin.append(repoName)
        elif len(setUrlsReachableCodeQl) == 0:
            counterRepoWithUrlsReachableDisjointCodeQlEmpty_signuplogin += 1
            lstNameRepoWithUrlsReachableDisjointCodeQlEmpty_signuplogin.append(repoName)
        else:
            counterRepoWithUrlsReachableDisjoint_signuplogin += 1
            lstNameRepoWithUrlsReachableDisjoint_signuplogin.append(repoName)
    elif setUrlsReachableCodeQl.issubset(setUrlsReachableCookieHunter):
        counterRepoWithUrlsCodeQLSubsetCookieHunter_signuplogin += 1
        lstNameRepoWithUrlsCodeQLSubsetCookieHunter_signuplogin.append(repoName)
    elif setUrlsReachableCookieHunter.issubset(setUrlsReachableCodeQl):
        counterRepoWithUrlsCookieHunterSubsetCodeQL_signuplogin += 1
        lstNameRepoWithUrlsCookieHunterSubsetCodeQL_signuplogin.append(repoName)
    elif len(setUrlsReachableCookieHunter.intersection(setUrlsReachableCodeQl)):
        counterRepoWithIntersectionUrls_signuplogin += 1
        lstNameRepoWithIntersectionUrls_signuplogin.append(repoName)

    if len(urlsReachableSignupCookieHunter) > 0:
        lstNameRepoWithCookieHunterUrlsReachable_signup.append(repoName)
    if len(urlsReachableLoginCookieHunter) > 0:
        lstNameRepoWithCookieHunterUrlsReachable_login.append(repoName)
    if len(urlsReachableSignupCodeQl) > 0:
        lstNameRepoWithCodeQlUrlsReachable_signup.append(repoName)
    if len(urlsReachableLoginCodeQl) > 0:
        lstNameRepoWithCodeQlUrlsReachable_login.append(repoName)

    # lstNameRepoWithLoginAttempted = []
    # lstNameRepoWithLoginSuccessful = []

    if len(urlsReachableLoginCookieHunter) > 0 or len(urlsReachableLoginCodeQl) > 0:
        lstNameRepoWitLoginUrlsReachable.append(repoName)

    if len(urlsReachableSignupCookieHunter) > 0 or len(urlsReachableSignupCodeQl) > 0:
        lstNameRepoWithSignupUrlsReachable.append(repoName)

    if (len(urlsReachableLoginCookieHunter) > 0 or len(urlsReachableLoginCodeQl) > 0) \
            and (len(urlsReachableSignupCookieHunter) > 0 or len(urlsReachableSignupCodeQl)) > 0:
        lstNameRepoWithLoginAndSignupUrlsReachable.append(repoName)

    if repoIsLoginAttempted:
        lstNameRepoWithLoginAttempted.append(repoName)

    if repoIsLoginSuccessful:
        lstNameRepoWithLoginSuccessful.append(repoName)

    if repoAreThereBothLoginAndSignupOnSamePort:
        lstNameRepoWithBothLoginAndSignupReachableOnSamePort.append(repoName)

    if repoIsSignupAttempted:
        lstNameRepoWithRegistrationAttempted.append(repoName)

    urlsReachableLoginCookieHunter.sort()
    urlsReachableSignupCookieHunter.sort()
    urlsReachableLoginCodeQl.sort()
    urlsReachableSignupCodeQl.sort()
    urlsRepo.append((repoName,
                     urlsReachableSignupCookieHunter, urlsReachableLoginCookieHunter,
                     urlsReachableSignupCodeQl, urlsReachableLoginCodeQl,
                     boolRepoUrlVisitedVsVisitedReachable, urlsCrawlerReachable, urlsCrawlerNotReachable,
                     repoIsLoginAttempted, repoIsLoginSuccessful, repoAreThereBothLoginAndSignupOnSamePort,
                     repoIsSignupAttempted))

outputGlobalStats = open(f"{DEFAULT_FILENAME_FOR_STATS}_global_CH_CODEQL.txt", "w")
outputGlobalStats.write(f"Num repos: {len(repos)}\n")
outputGlobalStats.write("\n")

lstNameRepoWithSignupUrlsReachable.sort(key=str.casefold)
lstNameRepoWitLoginUrlsReachable.sort(key=str.casefold)
lstNameRepoWithLoginAndSignupUrlsReachable.sort(key=str.casefold)
lstNameRepoWithLoginAttempted.sort(key=str.casefold)
lstNameRepoWithLoginSuccessful.sort(key=str.casefold)
lstNameRepoWithBothLoginAndSignupReachableOnSamePort.sort(key=str.casefold)
lstNameRepoWithRegistrationAttempted.sort(key=str.casefold)

outputGlobalStats.write(f"Num repos Registration form found: {len(lstNameRepoWithSignupUrlsReachable)}\n"
                        f" - {lstNameRepoWithSignupUrlsReachable}\n")
outputGlobalStats.write(f"Num repos Login form found: {len(lstNameRepoWitLoginUrlsReachable)}\n"
                        f" - {lstNameRepoWitLoginUrlsReachable}\n")
outputGlobalStats.write(
    f"Num repos Registration and login forms found: {len(lstNameRepoWithLoginAndSignupUrlsReachable)}\n"
    f" - {lstNameRepoWithLoginAndSignupUrlsReachable}\n")
outputGlobalStats.write(
    f"Num repos Registration and login forms found (ON SAME PORT): {len(lstNameRepoWithBothLoginAndSignupReachableOnSamePort)}\n"
    f" - {lstNameRepoWithBothLoginAndSignupReachableOnSamePort}\n")
outputGlobalStats.write(
    f"Num repos Registration attempted: {len(lstNameRepoWithRegistrationAttempted)}\n"
    f" - {lstNameRepoWithRegistrationAttempted}\n")
outputGlobalStats.write(f"Num repos Login attempted: {len(lstNameRepoWithLoginAttempted)}\n"
                        f" - {lstNameRepoWithLoginAttempted}\n")
outputGlobalStats.write(f"Num repos Login successful: {len(lstNameRepoWithLoginSuccessful)}\n"
                        f" - {lstNameRepoWithLoginSuccessful}\n")

outputGlobalStats.flush()
outputGlobalStats.close()
